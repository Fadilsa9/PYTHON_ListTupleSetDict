# ### List (Список)

# 1. Как объявить список в Python и каковы его основные свойства?
   
#   Список в Python объявляется с помощью квадратных скобок [] или с использованием функции list(). 
#   Основные свойства списка включают:
#    - Динамическое изменение размера.
#    - Хранение элементов любого типа.
#    - Индексация и срезы.
#    - Мутабельность (изменяемость).
  
#    my_list = [1, 2, 3, 4, 5]
#    another_list = list(['a', 'b', 'c'])

##################################################################################################

# 2. Как добавить элемент в конец списка? Как добавить элемент в определённую позицию?

#    Чтобы добавить элемент в конец списка, используется метод append(). 
#    Для добавления элемента в определённую позицию используется метод insert().
  
#    my_list = [1, 2, 3]
#    my_list.append(4)  # [1, 2, 3, 4]
#    my_list.insert(1, 'a')  # [1, 'a', 2, 3, 4]

##################################################################################################
   
# 3. Как удалить элемент из списка по значению? Как удалить элемент по индексу?

#    Для удаления элемента по значению используется метод remove(). Для удаления элемента по индексу используется метод pop().
  
#    my_list = [1, 2, 3, 4, 5]
#    my_list.remove(3)  # [1, 2, 4, 5]
#    my_list.pop(1)  # [1, 4, 5] - удаляет элемент с индексом 1

##################################################################################################
   
# 4. Чем отличаются методы append() и extend() в списках?

#    Метод append() добавляет один элемент в конец списка, 
#    Метод extend() добавляет все элементы переданного итерируемого объекта (например, списка) в конец текущего списка.
  
#    my_list = [1, 2, 3]
#    my_list.append([4, 5])  # [1, 2, 3, [4, 5]]
#    my_list.extend([6, 7])  # [1, 2, 3, [4, 5], 6, 7]

##################################################################################################
   
# 5. Как отсортировать список на месте? Как создать отсортированную копию списка?

#    Для сортировки списка на месте используется метод sort(). 
#    Для создания отсортированной копии списка используется функция sorted().
  
#    my_list = [3, 1, 4, 1, 5, 9]
#    my_list.sort()  # Сортирует на месте: [1, 1, 3, 4, 5, 9]
#    sorted_list = sorted(my_list)  # Создаёт отсортированную копию: [1, 1, 3, 4, 5, 9]

##################################################################################################
   
# 6. Напишите пример создания списка и его модификации (добавление, удаление и изменение элементов).

#    # Создание списка
#    my_list = [10, 20, 30, 40, 50]
#    print("Исходный список:", my_list)
   
#    # Добавление элементов
#    my_list.append(60)
#    my_list.insert(2, 25)
#    print("После добавления элементов:", my_list)  #После добавления элементов: [10, 20, 25, 30, 40, 50, 60]
 
#    # Удаление элементов
#    my_list.remove(40)
#    removed_element = my_list.pop(3)
#    print("После удаления элементов:", my_list)  #После удаления элементов: [10, 20, 25, 50, 60]
#    print("Удалённый элемент:", removed_element) #Удалённый элемент: 30
   
#    # Изменение элементов
#    my_list[1] = 22
#    print("После изменения элементов:", my_list) #После изменения элементов: [10, 22, 25, 50, 60]


##################################################################################################
##################################################################################################
##################################################################################################


### Tuple (Кортеж)

# 1. Как объявить кортеж в Python и каковы его основные свойства?

#   Кортеж в Python объявляется с использованием круглых скобок () или с помощью функции tuple(). 
#   Основные свойства кортежа включают:
#    - Неизменяемость: элементы кортежа не могут быть изменены после его создания.
#    - Упорядоченность: элементы в кортеже упорядочены и имеют определённый индекс.
#    - Возможность хранения элементов разных типов.
#    - Поддержка всех операций, доступных для списков, которые не изменяют кортеж.

  
#    my_tuple = (1, 2, 3)
#    another_tuple = tuple([4, 5, 6])

##################################################################################################
   
# 2. Можно ли изменять элементы кортежа после его создания? Обоснуйте ваш ответ.

# Нет, элементы кортежа нельзя изменять после его создания. Кортежи являются неизменяемыми структурами данных в Python, 
# что означает, что однажды созданные, они не могут быть изменены, добавлены или удалены. 
# Это свойство позволяет кортежам быть хэшируемыми и использоваться в качестве ключей для словарей и элементов множества.

##################################################################################################

# 3. Как объединить два кортежа в один?

#    Два кортежа можно объединить, используя операцию конкатенации +.

  
#    tuple1 = (1, 2, 3)
#    tuple2 = (4, 5, 6)
#    combined_tuple = tuple1 + tuple2
   
##################################################################################################
   
# 4. В чем преимущество использования кортежей по сравнению со списками?

#    Преимущества использования кортежей:
#    - Неизменяемость: Кортежи обеспечивают защиту данных от изменений.
#    - Производительность: Кортежи могут быть более эффективными по времени и памяти благодаря своей неизменяемости.
#    - Хэшируемость: Кортежи могут использоваться в качестве ключей для словарей и элементов множества, так как они неизменяемы.

##################################################################################################

# 5. Как получить доступ к элементам кортежа?

#    Доступ к элементам кортежа осуществляется по индексу, аналогично спискам, с использованием квадратных скобок [].

  
#    my_tuple = (1, 2, 3, 4)
#    first_element = my_tuple[0]  # 1
#    second_element = my_tuple[1]  # 2
   
##################################################################################################
   
# 6. Напишите пример создания кортежа и доступа к его элементам.

  
#    # Создание кортежа
#    my_tuple = (10, 20, 30, 40)

#    # Доступ к элементам кортежа
#    first_element = my_tuple[0]
#    second_element = my_tuple[1]
#    last_element = my_tuple[-1]

#    print(f"Первый элемент: {first_element}")  # Первый элемент: 10
#    print(f"Второй элемент: {second_element}")  # Второй элемент: 20
#    print(f"Последний элемент: {last_element}")  # Последний элемент: 40
   
   
##################################################################################################
##################################################################################################
##################################################################################################
   
   
### Set (Множество)

# 1. Как объявить множество в Python и каковы его основные свойства?

#   В Python множество объявляется с помощью фигурных скобок {} или с помощью функции set(). 
#   Основные свойства множества:
#    - Элементы множества уникальны (не могут повторяться).
#    - Множество неупорядочено, т.е. элементы в нём не имеют определённого порядка.
#    - Множество изменяемо, т.е. можно добавлять и удалять элементы.

  
#    my_set = {1, 2, 3}
#    another_set = set([4, 5, 6])
   
##################################################################################################
   
# 2. Можно ли в множестве хранить дублирующиеся элементы? Обоснуйте ваш ответ.

#    Нет, в множестве нельзя хранить дублирующиеся элементы. Это одно из основных свойств множеств — они содержат только уникальные значения. 
#    Если попытаться добавить в множество элемент, который уже в нём есть, то множество не изменится.

##################################################################################################

# 3. Как добавить элемент в множество? Как удалить элемент из множества?

#    Для добавления элемента используется метод add(), для удаления — методы remove(), discard(), и pop().
  
# my_set = {1, 2, 3}
# my_set.add(4)  # Добавить элемент
# print(my_set) 

# my_set.remove(2)  # Удалить элемент
# print(my_set) 

# my_set.discard(3)  # Удалить элемент без выброса исключения, если его нет
# print(my_set) 

# removed_element = my_set.pop()  # Удалить случайный элемент и вернуть его
# print(my_set) 
   
##################################################################################################
   
# 4. Объясните разницу между методами remove() и discard() в множествах.

#    - remove(element): удаляет указанный элемент из множества. Если элемента нет, вызывает исключение KeyError.
#    - discard(element): удаляет указанный элемент из множества. Если элемента нет, не вызывает исключения.
  
#    my_set = {1, 2, 3}
#    my_set.remove(2)  # Удаляет 2, множество становится {1, 3}
#    # my_set.remove(4)  # Выбросит KeyError, так как 4 нет в множестве

#    my_set.discard(3)  # Удаляет 3, множество становится {1}
#    my_set.discard(4)  # Ничего не произойдет, исключение не выбросится
   
##################################################################################################
   
# 5. Как выполняются операции объединения, пересечения и разности множеств?

#    - Объединение (union): возвращает множество, содержащее все уникальные элементы обоих множеств.
#    - Пересечение (intersection): возвращает множество, содержащее только общие элементы обоих множеств.
#    - Разность (difference): возвращает множество, содержащее элементы, которые присутствуют только в одном множестве.
  
#    set1 = {1, 2, 3}
#    set2 = {3, 4, 5}

#    union_set = set1.union(set2)  # {1, 2, 3, 4, 5}
#    intersection_set = set1.intersection(set2)  # {3}
#    difference_set = set1.difference(set2)  # {1, 2}
   
##################################################################################################
   
# 6. Напишите пример создания множества и выполнения основных операций (добавление, удаление, объединение и пересечение).

  
#    # Создание множества
#    my_set = {1, 2, 3}
#    print("Исходное множество:", my_set)

#    # Добавление элемента
#    my_set.add(4)
#    print("После добавления 4:", my_set)

#    # Удаление элемента
#    my_set.remove(2)
#    print("После удаления 2:", my_set)

#    # Объединение множеств
#    another_set = {3, 5, 6}
#    union_set = my_set.union(another_set)
#    print("Объединение с {3, 5, 6}:", union_set)

#    # Пересечение множеств
#    intersection_set = my_set.intersection(another_set)
#    print("Пересечение с {3, 5, 6}:", intersection_set)
   
#    Результат:
  
#    Исходное множество: {1, 2, 3}
#    После добавления 4: {1, 2, 3, 4}
#    После удаления 2: {1, 3, 4}
#    Объединение с {3, 5, 6}: {1, 3, 4, 5, 6}
#    Пересечение с {3, 5, 6}: {3}


##################################################################################################
##################################################################################################
##################################################################################################


### Dictionary (Словарь)

# 1. Как объявить словарь в Python и каковы его основные свойства?

#    В Python словарь объявляется с использованием фигурных скобок {}. 
#    Словарь представляет собой коллекцию пар "ключ-значение", 
#    где ключи уникальны и могут быть любого неизменяемого типа (например, строки, числа, кортежи). 
#    Значения могут быть любыми, включая другие словари.

  
# my_dict = {
#        'key1': 'value1',
#        'key2': 'value2',
#        'key3': 'value3'
#    }
   
#    Основные свойства словаря:
#    - Неупорядоченность (до Python 3.7, начиная с 3.7 поддерживается упорядоченность ввода).
#    - Ключи уникальны.
#    - Быстрый доступ к значениям по ключу (O(1) среднее время доступа).

##################################################################################################

# 2. Как добавить новую пару ключ-значение в словарь? Как изменить значение существующего ключа?

#    Чтобы добавить новую пару ключ-значение в словарь, используется синтаксис присваивания. 
#    Для изменения значения существующего ключа используется тот же синтаксис.

  
#    my_dict = {}
#    my_dict['new_key'] = 'new_value'  # Добавление новой пары
#    my_dict['new_key'] = 'updated_value'  # Изменение значения существующего ключа
   
##################################################################################################
   
# 3. Как удалить элемент из словаря по ключу? Что произойдёт, если попытаться удалить несуществующий ключ?

#    Для удаления элемента по ключу можно использовать метод pop() или оператор del. Если попытаться удалить несуществующий ключ методом pop(), 
#    можно указать значение по умолчанию, чтобы избежать ошибки. Оператор del вызовет ошибку KeyError, если ключ не существует.

  
#    my_dict = {'key1': 'value1', 'key2': 'value2'}

#    # Удаление с использованием pop
#    value = my_dict.pop('key1')  # Вернёт 'value1'
#    value = my_dict.pop('nonexistent_key', 'default_value')  # Вернёт 'default_value'

#    # Удаление с использованием del
#    del my_dict['key2']  # Удаляет 'key2'
#    del my_dict['nonexistent_key']  # KeyError
   
##################################################################################################
   
# 4. Как получить список всех ключей и всех значений словаря?

#    Для получения всех ключей используется метод keys(), а для значений - метод values().

#    my_dict = {'key1': 'value1', 'key2': 'value2'}
#    keys = my_dict.keys()  # dict_keys(['key1', 'key2'])
#    values = my_dict.values()  # dict_values(['value1', 'value2'])
   
##################################################################################################
   
# 5. Объясните разницу между методами get() и обычным доступом к значению по ключу.

#    Метод get() возвращает значение для указанного ключа, если ключ существует, и значение по умолчанию (или None), если ключ не найден. 
#    Обычный доступ по ключу через квадратные скобки вызывает ошибку KeyError, если ключ не существует.

  
#    my_dict = {'key1': 'value1'}
#    value1 = my_dict.get('key1')  # Вернёт 'value1'
#    value2 = my_dict.get('nonexistent_key')  # Вернёт None
#    value3 = my_dict.get('nonexistent_key', 'default_value')  # Вернёт 'default_value'

#    value4 = my_dict['key1']  # Вернёт 'value1'
#    value5 = my_dict['nonexistent_key']  # KeyError
   
##################################################################################################
   
# 6. Напишите пример создания словаря и выполнения основных операций (добавление, удаление, получение значений по ключу)

  
#    # Создание словаря
#    my_dict = {'name': 'Ahmed', 'age': 25, 'city': 'San Francisco'}

#    # Добавление новой пары ключ-значение
#    my_dict['email'] = 'ahmed@example.com'

#    # Изменение значения существующего ключа
#    my_dict['city'] = 'Baghdad'

#    # Получение значения по ключу
#    name = my_dict['name']  # 'Ahmed'
#    email = my_dict.get('email', 'No email')  # 'ahmed@example.com'

#    # Удаление элемента по ключу
#    age = my_dict.pop('age')  # 25
#    del my_dict['name']

#    # Получение всех ключей и значений
#    keys = my_dict.keys()  # dict_keys(['city', 'email'])
#    values = my_dict.values()  # dict_values(['Baghdad', 'ahmed@example.com'])

#    print(my_dict)  # {'city': 'Baghdad', 'email': 'ahmed@example.com'}
#    print(keys)  # dict_keys(['city', 'email'])
#    print(values)  # dict_values(['Baghdad', 'ahmed@example.com'])